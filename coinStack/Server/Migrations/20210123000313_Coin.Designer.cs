// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using coinStack.Server.Data;

namespace coinStack.Server.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20210123000313_Coin")]
    partial class Coin
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("coinStack.Shared.Coin", b =>
                {
                    b.Property<string>("id")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("image")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("last_updated")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("symbol")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("id");

                    b.ToTable("Coin");
                });

            modelBuilder.Entity("coinStack.Shared.PortfolioCoin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Coinid")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("UserPortfolioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Coinid");

                    b.HasIndex("UserPortfolioId");

                    b.ToTable("PortfolioCoins");
                });

            modelBuilder.Entity("coinStack.Shared.PortfolioTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("TransactionId")
                        .HasColumnType("int");

                    b.Property<int>("UserPortfolioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TransactionId");

                    b.HasIndex("UserPortfolioId");

                    b.ToTable("PortfolioTransactions");
                });

            modelBuilder.Entity("coinStack.Shared.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Coinid")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<bool>("Type")
                        .HasColumnType("bit");

                    b.Property<int>("USDValue")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Coinid");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("coinStack.Shared.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("coinStack.Shared.UserPortfolio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("CurrentlySelected")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserPortfolios");
                });

            modelBuilder.Entity("coinStack.Shared.PortfolioCoin", b =>
                {
                    b.HasOne("coinStack.Shared.Coin", "Coin")
                        .WithMany()
                        .HasForeignKey("Coinid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("coinStack.Shared.UserPortfolio", null)
                        .WithMany("PortfolioCoins")
                        .HasForeignKey("UserPortfolioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coin");
                });

            modelBuilder.Entity("coinStack.Shared.PortfolioTransaction", b =>
                {
                    b.HasOne("coinStack.Shared.Transaction", "Transaction")
                        .WithMany()
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("coinStack.Shared.UserPortfolio", null)
                        .WithMany("PortfolioTransactions")
                        .HasForeignKey("UserPortfolioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("coinStack.Shared.Transaction", b =>
                {
                    b.HasOne("coinStack.Shared.Coin", "Coin")
                        .WithMany()
                        .HasForeignKey("Coinid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coin");
                });

            modelBuilder.Entity("coinStack.Shared.UserPortfolio", b =>
                {
                    b.HasOne("coinStack.Shared.User", null)
                        .WithMany("UserPortfolios")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("coinStack.Shared.User", b =>
                {
                    b.Navigation("UserPortfolios");
                });

            modelBuilder.Entity("coinStack.Shared.UserPortfolio", b =>
                {
                    b.Navigation("PortfolioCoins");

                    b.Navigation("PortfolioTransactions");
                });
#pragma warning restore 612, 618
        }
    }
}
