@page "/edit/{coinId}"
@inject AuthenticationStateProvider CustomAuthStateProvider
@inject coinStack.Client.Services.ITransactionService TransactionService
@inject coinStack.Client.Services.PortfolioDataService PortfolioDataService
@implements IDisposable

<div class="container is-max-desktop">
    <h4 class="title is-4 has-text-centered">
        <strong>Edit @coinId Transactions</strong>
    </h4>
    <AuthorizeView>
        <Authorized Context="context">
            <div class="box has-text-centered" style="height: 250px; overflow-y: scroll">
                <TransactionListDisplay coinId="@coinId" reloader="@reload" />
            </div>
            <div class="box has-text-centered">
                <strong>Create a new transaction:</strong><br /><br />
                <div class="columns is-mobile">
                    <div class="column has-text-right pt-4">
                        Transaction Type:
                    </div>
                    <div class="column has-text-left">
                        <div class="dropdown @TransactionTypeActive">
                            <div class="dropdown-trigger">
                                <button class="button is-primary is-outlined" aria-haspopup="true" aria-controls="dropdown-menu3" @onclick="TypeToggler">
                                    <span>@(transaction.Type ? "Buy" : "Sell")</span>
                                    <span class="icon is-small" style="padding-top: 2px">
                                        <svg xmlns="http://www.w3.org/2000/svg"
                                             version="1.1"
                                             width="15"
                                             height="15"
                                             viewBox="0 0 320 512">
                                            <path fill="#fb9215" d="M143 352.3L7 216.3c-9.4-9.4-9.4-24.6 0-33.9l22.6-22.6c9.4-9.4 24.6-9.4 33.9 0l96.4 96.4 96.4-96.4c9.4-9.4 24.6-9.4 33.9 0l22.6 22.6c9.4 9.4 9.4 24.6 0 33.9l-136 136c-9.2 9.4-24.4 9.4-33.8 0z" />
                                        </svg>
                                    </span>
                                </button>
                            </div>
                            <div class="dropdown-menu" id="dropdown-menu3" role="menu">
                                <div class="dropdown-content" style="width:70px;">
                                    <button href="#" class="dropdown-item" style="background-color: #272727" @onclick="() => ChooseType(true)">
                                        Buy
                                    </button>
                                    <button href="#" class="dropdown-item" style="background-color: #272727" @onclick="() => ChooseType(false)">
                                        Sell
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <EditForm Model="transaction" OnValidSubmit="HandleSubmitTransaction" autocomplete="off" Context="form">
                    <DataAnnotationsValidator />
                    <div class="columns is-mobile">
                        <div class="column has-text-right pt-4">
                            Quantity @coinId:
                        </div>
                        <div class="column has-text-left">
                            <div class="field">
                                <input id="quantity" @bind-value="transaction.Quantity" class="input is-primary" />
                                <ValidationMessage For="@(() => transaction.Quantity)" />
                            </div>
                        </div>
                    </div>
                    <div class="columns is-mobile">
                        <div class="column has-text-right pt-4">
                            Price Per Coin:
                        </div>
                        <div class="column has-text-left">
                            <div class="field">
                                <input id="price" @bind-value="transaction.USDValue" class="input is-primary" />
                                <ValidationMessage For="@(() => transaction.USDValue)" />
                            </div>
                        </div>
                    </div>
                    <div class="columns is-mobile">
                        <div class="column has-text-right pt-4">
                            Date:
                        </div>
                        <div class="column has-text-left">
                            <div class="field">
                                <input id="date" type="date" required @bind-value="transaction.DateCreated" class="input is-primary" />
                                <ValidationMessage For="@(() => transaction.DateCreated)" />
                            </div>
                        </div>
                    </div>
                    <br />
                    <button class="button is-info is-outlined" type="submit" style="margin: 10px">
                        Save Transaction
                    </button>
                </EditForm>
            </div>
        </Authorized>
        <NotAuthorized Context="other">
            <h6 class="title is-6">Please log in below or <NavLink href="register">register</NavLink> a new account.</h6>
        </NotAuthorized>
    </AuthorizeView>
    <coinStack.Client.Shared.Footer />
</div>

@code {
    [Parameter]
    public string coinId { get; set; }

    public string reload = "";
    private Transaction transaction = new Transaction() { Type = true, DateCreated = DateTime.Now };
    private bool collapseTypeDropdown = true;
    private string TransactionTypeActive => collapseTypeDropdown ? "is-shadowless" : "is-shadowless is-active";

    protected override async Task OnInitializedAsync()
    {
        transaction.Coinid = coinId;

        PortfolioDataService.OnChange += StateHasChanged;

        if (PortfolioDataService.finishedCalculations) { return; }
        var result = await CustomAuthStateProvider.GetAuthenticationStateAsync();
        if (!result.User.Identity.IsAuthenticated) { return; }
        if (PortfolioDataService.Coins.Count == 0)
        {
            await PortfolioDataService.LoadPortfolioCoins();
            await PortfolioDataService.LoadCoins();
        }
        if (PortfolioDataService.Coins.Count == 0) { return; }
        await PortfolioDataService.GetPortfolioMarketData();
        await PortfolioDataService.LoadPortfolioTransactions();
        await PortfolioDataService.LoadTransactions();
        PortfolioDataService.CalculateAllCoinStats();
    }

    public async Task HandleSubmitTransaction()
    {
        await TransactionService.AddPortfolioTransaction(transaction);
        await PortfolioDataService.GetPortfolioMarketData();
        await PortfolioDataService.LoadPortfolioTransactions();
        await PortfolioDataService.LoadTransactions();
        PortfolioDataService.CalculateAllCoinStats();
        if (reload.Length == 0) { reload = "a"; } else { reload = ""; }
    }

    private void TypeToggler()
    {
        collapseTypeDropdown = !collapseTypeDropdown;
    }

    private void ChooseType(bool t)
    {
        transaction.Type = t;
    }

    public void Dispose()
    {
        PortfolioDataService.OnChange -= StateHasChanged;
    }
}
