@page "/login"
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavigationManager
@inject coinStack.Client.Services.AuthService AuthService
@inject coinStack.Client.Services.PortfolioDataService PortfolioDataService
@inject IToastService ToastService

<div class="container is-max-desktop">
    <AuthorizeView>
        <Authorized Context="context">
            <div class="box has-text-centered">
                <h6 class="title is-6">You are logged in as: @context.User.Identity.Name</h6>
                <div class="button is-primary is-outlined" @onclick="Logout">
                    <strong>Log Out</strong>
                </div>
            </div>
        </Authorized>
        <NotAuthorized Context="other">
            <h6 class="title is-6">Please log in below or <NavLink href="register">register</NavLink> a new account.</h6>
            <EditForm Model="user" OnValidSubmit="HandleLogin" autocomplete="off">
                <DataAnnotationsValidator />
                <div class="field">
                    <label for="email">Email</label>
                    <InputText id="email" @bind-Value="user.Email" class="input is-primary" />
                </div>
                <div class="field">
                    <label for="password">Password</label>
                    <InputText id="password" @bind-Value="user.Password" type="password" class="input is-primary" />
                </div>
                <button type="submit" class="button is-primary is-outlined">Log In</button>
                <ValidationSummary />
            </EditForm>
        </NotAuthorized>
    </AuthorizeView>
    <coinStack.Client.Shared.Footer />
</div>

@code {
    private UserLogin user = new UserLogin();

    private async void HandleLogin()
    {
        var result = await AuthService.Login(user);
        if (result.Success)
        {
            await LocalStorage.SetItemAsync<string>("authToken", result.Data);
            await AuthStateProvider.GetAuthenticationStateAsync();
            ToastService.ShowSuccess("Login Successful!");
        }
        else
        {
            ToastService.ShowError(result.Message);
        }
    }

    private async void Logout()
    {
        await LocalStorage.RemoveItemAsync("authToken");
        await AuthStateProvider.GetAuthenticationStateAsync();
        NavigationManager.NavigateTo("/");

        PortfolioDataService.initialized = false;
        PortfolioDataService.TotalValue = 0;
        PortfolioDataService.TotalPnL = 0;
        PortfolioDataService.PortfolioCoins.Clear();
        PortfolioDataService.Coins.Clear();
        PortfolioDataService.PortfolioTransactions.Clear();
        PortfolioDataService.Transactions.Clear();
        PortfolioDataService.MarketDataResponses.Clear();
        PortfolioDataService.PortfolioCoinStats.Clear();
    }
}
