@page "/register"
@inject NavigationManager NavigationManager
@inject coinStack.Client.Services.AuthService AuthService
@inject IToastService ToastService


<div class="container is-max-desktop">
    <h3>Register</h3>

    <EditForm Model="@user" OnValidSubmit="HandleRegistration" autocomplete="off">
        <DataAnnotationsValidator />
        <div class="field">
            <label for="email">Email</label>
            <InputText id="email" @bind-Value="user.Email" class="input is-primary" />
            <ValidationMessage For="@(() => user.Email)" />
        </div>
        <div class="field">
            <label for="username">Username</label>
            <InputText id="username" @bind-Value="user.Username" class="input is-primary" />
            <ValidationMessage For="@(() => user.Email)" />
        </div>
        <div class="field">
            <label for="password">Password</label>
            <InputText id="password" @bind-Value="user.Password" type="password" class="input is-primary" />
            <ValidationMessage For="@(() => user.Password)" />
        </div>
        <div class="field">
            <label for="confirmPassword">Confirm Password</label>
            <InputText id="confirmPassword" @bind-Value="user.ConfirmPassword" type="password" class="input is-primary" />
            <ValidationMessage For="@(() => user.ConfirmPassword)" />
        </div>
        <button type="submit" class="button is-primary is-outlined">Register</button>
    </EditForm>
    <coinStack.Client.Shared.Footer />
</div>

@code {
    UserRegister user = new UserRegister();

    async void HandleRegistration()
    {
        var result = await AuthService.Register(user);
        if (result.Success)
        {
            NavigationManager.NavigateTo("/login");
            ToastService.ShowSuccess("Registration successful. Please log in with your new account!");
        }
        else
        {
            ToastService.ShowError(result.Message);
        }
    }

}
