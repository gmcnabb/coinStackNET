@using System.Net.Http
@inject HttpClient Http
@using Sve.Blazor.InfiniteScroll.Components

<div style="height: 500px; overflow-y: auto">
    <InfiniteScroll ObserverTargetId="observerTarget" ObservableTargetReached="(e) => FetchCoins()">
        <ul>
            @foreach (Coin c in coinList)
            {
                <li>
                    <div class="columns is-gapless is-mobile mb-0">
                        <div class="button is-info is-outlined is-rounded is-fullwidth mb-0" @onclick="@AddToWatchlist">
                            <div class="column has-text-centered" style="text-overflow: ellipsis; overflow-x: hidden">
                                @c.name&emsp;@c.symbol
                            </div>
                        </div>
                    </div>
                </li>
            }
        </ul>
        <li id="observerTarget">Loading...</li>
    </InfiniteScroll>
</div>

@code {
    private string COINGECKO_COINS = "https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&order=market_cap_desc&per_page=100";
    private List<Coin> coinList = new List<Coin>();
    private DateTime lastFetch = DateTime.Now;
    private bool firstFetch = true;
    private int pagesFetched = 0;

    public class Coin
    {
        public string symbol { get; set; }
        public string name { get; set; }
    }

    protected override async Task OnParametersSetAsync()
    {
        await FetchCoins();
    }

    public async Task FetchCoins()
    {
        if (DateTime.Now - lastFetch > new TimeSpan(0, 0, 1) || firstFetch == true)
        {
            Console.WriteLine(DateTime.Now - lastFetch);
            int pageNum = pagesFetched;
            pagesFetched++;
            List<Coin> fetchedCoins = await Http.GetFromJsonAsync<List<Coin>>
                ($"{COINGECKO_COINS}&page={pageNum}&sparkline=false");
            coinList.AddRange(fetchedCoins);
            lastFetch = DateTime.Now;
            firstFetch = false;
        }
    }

    public async Task<bool> AddToWatchlist()
    {
        Console.WriteLine("ok");
        return true;
    }
}
