@using System.Net.Http
@using Sve.Blazor.InfiniteScroll.Components
@inject HttpClient Http
@inject coinStack.Client.Services.ICoinService CoinService
@inject coinStack.Client.Services.PortfolioDataService PortfolioDataService
@implements IDisposable

<AuthorizeView>
    <Authorized>
        <div style="height: 500px; overflow-y: auto">
            @if (coinList.Count > 0)
            {
                <InfiniteScroll ObserverTargetId="observerTarget" ObservableTargetReached="(e) => FetchCoins()">
                    <ul>
                        @foreach (Coin c in coinList)
                        {
                            <li>
                                <div class="columns is-gapless mb-0">
                                    <div class="button is-info is-outlined is-rounded is-fullwidth mb-0" @onclick="() => AddToPortfolio(c)">
                                        <div class="column has-text-right is-5 is-5-mobile" style="text-overflow: ellipsis; overflow-x: hidden">
                                            <img alt="@c.id logo" src="@c.image" style="height: 36px; width: 36px; vertical-align: middle" />
                                        </div>
                                        <div class="column has-text-left is-7 is-7-mobile" style="text-overflow: ellipsis; overflow-x: hidden">
                                            @c.name&emsp;@c.symbol.ToUpper()
                                        </div>
                                    </div>
                                </div>
                            </li>
                        }
                    </ul>
                    <li id="observerTarget">Loading...</li>
                </InfiniteScroll>
            }
            else
            { <div>loading...</div>}
        </div>
    </Authorized>
    <NotAuthorized>
        <div class="box has-text-centered">
            <h6 class="title is-6">Please <NavLink href="login">Log in</NavLink> or <NavLink href="register">register</NavLink> a new account to add coins to your portfolio.</h6>
        </div>
    </NotAuthorized>
</AuthorizeView>

@code {
    private string COINGECKO_COINS = "https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&order=market_cap_desc&per_page=100";
    private List<Coin> coinList = new List<Coin>();
    private DateTime lastFetch = DateTime.Now;
    private bool firstFetch = true;
    private int pagesFetched = 1;

    protected override void OnInitialized()
    {
        PortfolioDataService.OnChange += StateHasChanged;
    }

    protected override async Task OnParametersSetAsync()
    {
        pagesFetched = 1;
        await FetchCoins();
    }

    public async Task FetchCoins()
    {
        if (DateTime.Now - lastFetch > new TimeSpan(0, 0, 1) || firstFetch == true)
        {
            int pageNum = pagesFetched;
            pagesFetched++;
            List<Coin> fetchedCoins = await Http.GetFromJsonAsync<List<Coin>>
                ($"{COINGECKO_COINS}&page={pageNum}&sparkline=false");
            coinList.AddRange(fetchedCoins);
            lastFetch = DateTime.Now;
            firstFetch = false;
        }
    }

    public async Task AddToPortfolio(Coin c)
    {
        PortfolioDataService.calculating = true;
        var exists = await CoinService.CheckForCoin(c.id);
        if (!exists)
        {
            bool addCoinResult = await CoinService.AddCoin(c);
            if (addCoinResult)
            {
                await CoinService.AddPortfolioCoin(c);
            }
        }
        else
        {
            await CoinService.AddPortfolioCoin(c);
        }
        await PortfolioDataService.LoadPortfolioCoins();
        await PortfolioDataService.LoadCoins();
        await PortfolioDataService.GetPortfolioMarketData();
        await PortfolioDataService.LoadPortfolioTransactions();
        await PortfolioDataService.LoadTransactions();
        PortfolioDataService.CalculateAllCoinStats();
    }

    public void Dispose()
    {
        PortfolioDataService.OnChange -= StateHasChanged;
    }
}
